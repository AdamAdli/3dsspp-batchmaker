package conversion;

import model.Trial;

import java.io.FileOutputStream;
import java.io.PrintWriter;

public class BatchExporter {
    private static boolean AUTO_EXPORT = true;

    public static String createBatch(Trial[] trials) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("3DSSPPBATCHFILE #\n");
        stringBuilder.append("COM Generated by Batchmaker. #\n");
        stringBuilder.append("AUT " + (AUTO_EXPORT ? "1" : "0") + " #\n");

        for (int i = 0; i < trials.length; i++) {
            //DES 0 "Loads A" "Suzy Anybody" "Hand loads case A" "Company" #
            stringBuilder.append("DES 0 + \"Row " + Integer.toString(i) +"\" \"Name\" \"Trial\" \"Company\" #\n");
            stringBuilder.append("ANT " + Integer.toString(trials[i].sex) + " " + Integer.toString(trials[i].percentile)
                    + " " + Float.toString(trials[i].height) + " " + Float.toString(trials[i].weight) + " #\n");

            stringBuilder.append("JOA ");
            for (int j = 0; j < trials[i].segAngles.length; j++) {
                stringBuilder.append(trials[i].segAngles[j]);
                stringBuilder.append(" ");
            }
            stringBuilder.append("#\n");

            stringBuilder.append("HAN ");
            for (int j = 0; j < trials[i].handLoads.length; j++) {
                stringBuilder.append(trials[i].handLoads[j]);
                stringBuilder.append(" ");
            }
            stringBuilder.append("#\n");

            stringBuilder.append("HCL ");
            for (int j = 0; j < trials[i].handCompLeft.length; j++) {
                stringBuilder.append(trials[i].handCompLeft[j]);
                stringBuilder.append(" ");
            }
            stringBuilder.append("#\n");

            stringBuilder.append("HCR ");
            for (int j = 0; j < trials[i].handCompRight.length; j++) {
                stringBuilder.append(trials[i].handCompRight[j]);
                stringBuilder.append(" ");
            }
            stringBuilder.append("#\n");
        }

        return stringBuilder.toString();
    }

    public static Runnable createBatch2(Trial[] trials, BatchSavedCallback savedCallback) {
        return new Runnable() {
            @Override
            public void run() {
                savedCallback.onSaved(createBatch(trials));
            }
        };
    }

    public static void saveBatch(String filepath, Trial[] trials) {
        try {
            PrintWriter writer = new PrintWriter(filepath, "UTF-8");
            writer.println("3DSSPPBATCHFILE #");
            writer.println("COM Generated by Batchmaker. #");
            writer.println("AUT " + (AUTO_EXPORT ? "1" : "0") + " #");

            for (int i = 0; i < trials.length; i++) {
                //DES 0 "Loads A" "Suzy Anybody" "Hand loads case A" "Company" #
                writer.println("DES 0 Row " + Integer.toString(i) +"\" \"Name\" \"Trial\" \"Company\" #");
                writer.println("ANT " + Integer.toString(trials[i].sex) + " " + Integer.toString(trials[i].percentile)
                        + " " + Float.toString(trials[i].height) + " " + Float.toString(trials[i].weight) + " #");

                writer.print("JOA ");
                for (int j = 0; j < trials[i].segAngles.length; j++) {
                    writer.print(trials[i].segAngles[j]);
                    writer.print(" ");
                }
                writer.println();

                writer.print("HAN ");
                for (int j = 0; j < trials[i].handLoads.length; j++) {
                    writer.print(trials[i].handLoads[j]);
                    writer.print(" ");
                }
                writer.println();

                writer.print("HCL ");
                for (int j = 0; j < trials[i].handCompLeft.length; j++) {
                    writer.print(trials[i].handCompLeft[j]);
                    writer.print(" ");
                }
                writer.println();

                writer.print("HCR ");
                for (int j = 0; j < trials[i].handCompRight.length; j++) {
                    writer.print(trials[i].handCompRight[j]);
                    writer.print(" ");
                }
                writer.println();
            }
            writer.flush();
            writer.close();
        } catch (Exception ex) {

        }
    }

    public static Runnable saveToBatchFile(String filepath, Trial[] trials, BatchSavedCallback savedCallback) {
        return new Runnable() {
            @Override
            public void run() {
                saveBatch(filepath, trials);
                savedCallback.onSaved(filepath);
            }
        };
    }


    public interface BatchSavedCallback {
        void onSaved(String string);
    }
}
